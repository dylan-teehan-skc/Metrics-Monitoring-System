name: CI/CD Pipeline

on:
  push:
    branches:
      - main
      - master
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov
      
      - name: Run unit tests with coverage
        run: |
          python -m pytest src/tests/unit -v --cov=src --cov-report=xml:unit-coverage.xml --junitxml=unit-test-results.xml

      - name: Upload unit test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: unit-test-results
          path: |
            unit-test-results.xml
            unit-coverage.xml
          retention-days: 30

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov
      
      - name: Run integration tests with coverage
        run: |
          python -m pytest src/tests/integration -v --cov=src --cov-report=xml:integration-coverage.xml --junitxml=integration-test-results.xml

      - name: Upload integration test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: integration-test-results
          path: |
            integration-test-results.xml
            integration-coverage.xml
          retention-days: 30

  sonarcloud:
    name: SonarCloud Analysis
    needs: [unit-tests, integration-tests]
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install coverage pytest pytest-cov pylint
      
      - name: Download test results
        uses: actions/download-artifact@v4
        with:
          path: test-results
          merge-multiple: true

      - name: Run pylint
        run: |
          pylint src/ --output-format=text:pylint-report.txt,colorized || true
      
      - name: Generate combined coverage report
        run: |
          python -c "
          import xml.etree.ElementTree as ET
          import sys
          
          def merge_coverage(files, output='coverage.xml'):
              # Load first file as base
              tree = ET.parse('test-results/unit-coverage.xml')
              root = tree.getroot()
              
              # Get base coverage data
              packages = root.find('packages')
              
              # Load and merge integration coverage
              int_tree = ET.parse('test-results/integration-coverage.xml')
              int_root = int_tree.getroot()
              
              # Update total statistics
              for child in root:
                  if child.tag == 'packages':
                      continue
                  int_child = int_root.find(child.tag)
                  if int_child is not None:
                      for attr in child.attrib:
                          if attr.startswith(('line-rate', 'branch-rate', 'complexity')):
                              val1 = float(child.get(attr, 0))
                              val2 = float(int_child.get(attr, 0))
                              child.set(attr, str((val1 + val2) / 2))
                          elif attr.startswith(('lines-', 'branches-')):
                              val1 = int(child.get(attr, 0))
                              val2 = int(int_child.get(attr, 0))
                              child.set(attr, str(val1 + val2))
              
              # Merge package coverage data
              seen_files = set()
              for package in packages.findall('package'):
                  for classes in package.findall('classes'):
                      for cls in classes.findall('class'):
                          seen_files.add(cls.get('filename'))
              
              # Add unique files from integration tests
              for package in int_root.find('packages').findall('package'):
                  for classes in package.findall('classes'):
                      for cls in classes.findall('class'):
                          if cls.get('filename') not in seen_files:
                              # Find or create matching package in base tree
                              pack_name = package.get('name')
                              base_pack = None
                              for p in packages.findall('package'):
                                  if p.get('name') == pack_name:
                                      base_pack = p
                                      break
                              if base_pack is None:
                                  base_pack = ET.SubElement(packages, 'package', package.attrib)
                                  base_pack.append(ET.Element('classes'))
                              
                              # Add class to base package
                              base_classes = base_pack.find('classes')
                              base_classes.append(cls)
                              seen_files.add(cls.get('filename'))
              
              # Write merged result
              tree.write('coverage.xml', encoding='utf-8', xml_declaration=True)
          
          merge_coverage(['test-results/unit-coverage.xml', 'test-results/integration-coverage.xml'])
          "

      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@v2.1.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          args: >
            -Dsonar.projectKey=dylan-teehan-skc_Metrics-Monitoring-System
            -Dsonar.organization=dylan-teehan-skc
            -Dsonar.python.version=3.11
            -Dsonar.sources=src
            -Dsonar.tests=src/tests
            -Dsonar.coverage.exclusions=src/tests/**/*,src/**/__init__.py,src/tests/**
            -Dsonar.python.coverage.reportPaths=coverage.xml
            -Dsonar.python.pylint.reportPaths=pylint-report.txt
            -Dsonar.python.xunit.reportPath=test-results/unit-test-results.xml,test-results/integration-test-results.xml
            -Dsonar.verbose=true
            -Dsonar.sourceEncoding=UTF-8
            -Dsonar.scm.provider=git
            -Dsonar.qualitygate.wait=true
            -Dsonar.cpd.exclusions=src/tests/**
            -Dsonar.coverage.jacoco.xmlReportPaths=coverage.xml
            -Dsonar.qualitygate.quality_gate=custom_gate
            -Dsonar.qualitygate.custom_gate.conditions=coverage
            -Dsonar.qualitygate.custom_gate.coverage.threshold=50
            -Dsonar.issue.ignore.multicriteria=e1,e2,e3,e4
            -Dsonar.issue.ignore.multicriteria.e1.ruleKey=python:S1144
            -Dsonar.issue.ignore.multicriteria.e1.resourceKey=**/*.py
            -Dsonar.issue.ignore.multicriteria.e2.ruleKey=python:S3776
            -Dsonar.issue.ignore.multicriteria.e2.resourceKey=**/*.py
            -Dsonar.issue.ignore.multicriteria.e3.ruleKey=python:S1134
            -Dsonar.issue.ignore.multicriteria.e3.resourceKey=**/*.py
            -Dsonar.issue.ignore.multicriteria.e4.ruleKey=python:S3776
            -Dsonar.issue.ignore.multicriteria.e4.resourceKey=**/*.py 